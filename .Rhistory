m = makeCacheMatrix( rbind(c(1, 2, 3), c(0,4,5), c(1,0,6)) )
m = makeCacheMatrix( rbind(c(1, 2, 3), c(0,4,5), c(1,0,6)) )
m = makeCacheMatrix( rbind(c(1, 2, 3), c(0,4,5), c(1,0,6)) )
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
m = makeCacheMatrix( rbind(c(1, 2, 3), c(0,4,5), c(1,0,6)) )
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL                                       # initialise inverse variable
## set matrix function
set <- function(y) {
x <<- y                                           # store the matrix in x
inverse <<- null                                  # assure an existing inverse is cleared when a new matrix is set
}
get <- function() x                                   # get matrix function
setinverse <- function(solved) inverse <<- solved     # set inverse of matrix function
getinverse <- function() inverse                      # get inverse of matrix function
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse()                                 # request te inverse matrix from x
if (!is.null(inverse)) {                                  # when the result is not null it is
message("[Inverse of matrix returned from cache]")      #   the inverted matrix and it can
return(inverse)                                         #   be returned.
}
# otherwise continue with the function
matrix <- x$get()                                         # retrieve the original matrix
inverse <- solve(matrix, ...)                             # compute the inverse of the matrix
x$setinverse(inverse)                                     # cache the inverse to x
inverse                                                   # return the inverse matrix
}
m = makeCacheMatrix( rbind(c(1, 2, 3), c(0,4,5), c(1,0,6)) )
cacheSolve(m)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getInverse()
if(!is.null(m)){
return(m)
}
else{
data<-x$get()
m<-solve(data)
x$setInverse(m)
m
}
}
cacheSolve(m)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
clear
cls
source('D:/DEV/GitHub/ExData_Plotting1/plot1.r')
source('D:/DEV/GitHub/ExData_Plotting1/plot1.r')
View(data)
source('D:/DEV/GitHub/ExData_Plotting1/plot1.r')
source('D:/DEV/GitHub/ExData_Plotting1/plot1.r')
source('D:/DEV/GitHub/ExData_Plotting1/plot1.r')
View(data)
View(data)
rm(datetime)
source('D:/DEV/GitHub/ExData_Plotting1/plot1.r')
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
source('D:/DEV/GitHub/ExData_Plotting1/plot1.r')
setwd(".")
## define your working directory
setwd(".")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png(filename = "plot3.png", width = 480, height = 480, units = "px", bg = "white")
## the chart
hist(data$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## close file
dev.off()
setwd("D:/DEV/GitHub/ExData_Plotting1")
## define your working directory
setwd(".")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png(filename = "plot3.png", width = 480, height = 480, units = "px", bg = "white")
## the chart
hist(data$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## close file
dev.off()
## define your working directory
setwd(".")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png(filename = "plot1.png", width = 480, height = 480, units = "px", bg = "white")
## the chart
hist(data$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
## close file
dev.off()
## define your working directory
setwd(".")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png(filename = "plot2.png", width = 480, height = 480, units = "px", bg = "white")
## the chart
plot(data$Global_active_power~data$DateTime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
## close file
dev.off()
## define your working directory
setwd(".")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png(filename = "plot3.png", width = 480, height = 480, units = "px", bg = "white")
## the chart
with(data, {
plot(Sub_metering_1~DateTime , type="S", col="black", ylab="Energy sub metering", xlab=""
, cex.lab=0.8, cex.axis=0.8)
lines(Sub_metering_2~DateTime, type="S", col='Red' )
lines(Sub_metering_3~DateTime, type="S", col='Blue')
})
legend("topright", col=c("black", "red", "blue"),
lty = c(1, 1), lwd = c(1, 1, 1), cex=0.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving to file
dev.off()
## define your working directory
setwd(".")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png("plot4.png", width=480, height=480, units = "px", bg = "white"))
## define 2x2 frames
par(mfrow=c(2,2))
## chart 1
plot(data$DateTime, data$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power")
## chart 2
plot(data$DateTime, data$Voltage, type="l", xlab="datetime", ylab="Voltage")
## chart 3
plot(data$DateTime, data$Sub_metering_1, type="l", col="black",
xlab="", ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, col="red")
lines(data$DateTime, data$Sub_metering_3, col="blue")
legend("topright",
col=c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1,
box.lwd=0,
bty="n")
## chart4
plot(data$DateTime, data$Global_reactive_power, type="n",
xlab="datetime", ylab="Global_reactive_power")
lines(data$DateTime, data$Global_reactive_power)
## close file
dev.off()
Sys.info()
.Platform$OS.type
if(.Platform$OS.type=="windows") "a" else "b"
if(.Platform$OS.type!="windows") "a" else "b"
## define your working directory
setwd(".")
## define language (for weekday names)
if(.Platform$OS.type!="windows")
Sys.setlocale("LC_TIME","English United States")
if(.Platform$OS.type!="unix")
Sys.setlocale("LC_TIME", "en_US")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png(filename = "plot3.png", width = 480, height = 480, units = "px", bg = "white")
## the chart
with(data, {
plot(Sub_metering_1~DateTime , type="S", col="black", ylab="Energy sub metering", xlab=""
, cex.lab=0.8, cex.axis=0.8)
lines(Sub_metering_2~DateTime, type="S", col='Red' )
lines(Sub_metering_3~DateTime, type="S", col='Blue')
})
legend("topright", col=c("black", "red", "blue"),
lty = c(1, 1), lwd = c(1, 1, 1), cex=0.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving to file
dev.off()
## define your working directory
setwd(".")
## define language (for weekday names)
if(.Platform$OS.type!="windows")
Sys.setlocale("LC_TIME","English")
if(.Platform$OS.type!="unix")
Sys.setlocale("LC_TIME", "en_US")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png(filename = "plot3.png", width = 480, height = 480, units = "px", bg = "white")
## the chart
with(data, {
plot(Sub_metering_1~DateTime , type="S", col="black", ylab="Energy sub metering", xlab=""
, cex.lab=0.8, cex.axis=0.8)
lines(Sub_metering_2~DateTime, type="S", col='Red' )
lines(Sub_metering_3~DateTime, type="S", col='Blue')
})
legend("topright", col=c("black", "red", "blue"),
lty = c(1, 1), lwd = c(1, 1, 1), cex=0.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving to file
dev.off()
## define your working directory
setwd(".")
## define language (for weekday names)
#if(.Platform$OS.type!="windows")
Sys.setlocale("LC_TIME","English United States")
#if(.Platform$OS.type!="unix")
#  Sys.setlocale("LC_TIME", "en_US")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png(filename = "plot3.png", width = 480, height = 480, units = "px", bg = "white")
## the chart
with(data, {
plot(Sub_metering_1~DateTime , type="S", col="black", ylab="Energy sub metering", xlab=""
, cex.lab=0.8, cex.axis=0.8)
lines(Sub_metering_2~DateTime, type="S", col='Red' )
lines(Sub_metering_3~DateTime, type="S", col='Blue')
})
legend("topright", col=c("black", "red", "blue"),
lty = c(1, 1), lwd = c(1, 1, 1), cex=0.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving to file
dev.off()
Sys.getlocale()
## define your working directory
setwd(".")
## define language (for weekday names)
#if(.Platform$OS.type!="windows")
Sys.setlocale("LC_TIME","English_United Kingdom.1252") #English United States
#if(.Platform$OS.type!="unix")
#  Sys.setlocale("LC_TIME", "en_US")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png(filename = "plot3.png", width = 480, height = 480, units = "px", bg = "white")
## the chart
with(data, {
plot(Sub_metering_1~DateTime , type="S", col="black", ylab="Energy sub metering", xlab=""
, cex.lab=0.8, cex.axis=0.8)
lines(Sub_metering_2~DateTime, type="S", col='Red' )
lines(Sub_metering_3~DateTime, type="S", col='Blue')
})
legend("topright", col=c("black", "red", "blue"),
lty = c(1, 1), lwd = c(1, 1, 1), cex=0.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving to file
dev.off()
## define your working directory
setwd(".")
## define language for weekday names
if(.Platform$OS.type!="windows")
Sys.setlocale("LC_TIME","English_United Kingdom.1252")
if(.Platform$OS.type!="unix")
Sys.setlocale("LC_TIME", "en_US")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png(filename = "plot3.png", width = 480, height = 480, units = "px", bg = "white")
## the chart
with(data, {
plot(Sub_metering_1~DateTime , type="S", col="black", ylab="Energy sub metering", xlab=""
, cex.lab=0.8, cex.axis=0.8)
lines(Sub_metering_2~DateTime, type="S", col='Red' )
lines(Sub_metering_3~DateTime, type="S", col='Blue')
})
legend("topright", col=c("black", "red", "blue"),
lty = c(1, 1), lwd = c(1, 1, 1), cex=0.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving to file
dev.off()
## define your working directory
setwd(".")
## define language for weekday names
if(.Platform$OS.type=="windows")
Sys.setlocale("LC_TIME","English_United Kingdom.1252")
if(.Platform$OS.type=="unix")
Sys.setlocale("LC_TIME", "en_US")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png(filename = "plot3.png", width = 480, height = 480, units = "px", bg = "white")
## the chart
with(data, {
plot(Sub_metering_1~DateTime , type="S", col="black", ylab="Energy sub metering", xlab=""
, cex.lab=0.8, cex.axis=0.8)
lines(Sub_metering_2~DateTime, type="S", col='Red' )
lines(Sub_metering_3~DateTime, type="S", col='Blue')
})
legend("topright", col=c("black", "red", "blue"),
lty = c(1, 1), lwd = c(1, 1, 1), cex=0.8,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
## Saving to file
dev.off()
## define your working directory
setwd(".")
## define language for weekday names
if(.Platform$OS.type=="windows")
Sys.setlocale("LC_TIME","English_United Kingdom.1252")
if(.Platform$OS.type=="unix")
Sys.setlocale("LC_TIME", "en_US")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png(filename = "plot2.png", width = 480, height = 480, units = "px", bg = "white")
## the chart
plot(data$Global_active_power~data$DateTime, type="l", ylab="Global Active Power (kilowatts)", xlab="")
## close file
dev.off()
## define your working directory
setwd(".")
## define language for weekday names
if(.Platform$OS.type=="windows")
Sys.setlocale("LC_TIME","English_United Kingdom.1252")
if(.Platform$OS.type=="unix")
Sys.setlocale("LC_TIME", "en_US")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png("plot4.png", width=480, height=480, units = "px", bg = "white"))
## define 2x2 frames
par(mfrow=c(2,2))
## chart 1
plot(data$DateTime, data$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power")
## chart 2
plot(data$DateTime, data$Voltage, type="l", xlab="datetime", ylab="Voltage")
## chart 3
plot(data$DateTime, data$Sub_metering_1, type="l", col="black",
xlab="", ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, col="red")
lines(data$DateTime, data$Sub_metering_3, col="blue")
legend("topright",
col=c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1,
box.lwd=0,
bty="n")
## chart4
plot(data$DateTime, data$Global_reactive_power, type="n",
xlab="datetime", ylab="Global_reactive_power")
lines(data$DateTime, data$Global_reactive_power)
## close file
dev.off()
## define your working directory
setwd(".")
## define language for weekday names
if(.Platform$OS.type=="windows")
Sys.setlocale("LC_TIME","English_United Kingdom.1252")
if(.Platform$OS.type=="unix")
Sys.setlocale("LC_TIME", "en_US")
## data file will be load from de working directory
data <- read.csv("./household_power_consumption.txt", header=T, sep=';', na.strings="?"
, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
data$Date <- as.Date(data$Date, format="%d/%m/%Y")
## filter data
data <- subset(data, subset=(Date >= "2007-02-01" & Date < "2007-02-03"))
## create new column DateTime with date and time
data$DateTime <- as.POSIXct( paste(as.Date(data$Date), data$Time) )
## define plot properties
png("plot4.png", width=480, height=480, units = "px", bg = "white")
## define 2x2 frames
par(mfrow=c(2,2))
## chart 1
plot(data$DateTime, data$Global_active_power,
type="l",
xlab="",
ylab="Global Active Power")
## chart 2
plot(data$DateTime, data$Voltage, type="l", xlab="datetime", ylab="Voltage")
## chart 3
plot(data$DateTime, data$Sub_metering_1, type="l", col="black",
xlab="", ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, col="red")
lines(data$DateTime, data$Sub_metering_3, col="blue")
legend("topright",
col=c("black", "red", "blue"),
c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
lty=1,
box.lwd=0,
bty="n")
## chart4
plot(data$DateTime, data$Global_reactive_power, type="n",
xlab="datetime", ylab="Global_reactive_power")
lines(data$DateTime, data$Global_reactive_power)
## close file
dev.off()
